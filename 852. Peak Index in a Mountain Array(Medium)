/*
  Task: An array arr a mountain if the following properties hold:
  arr.length >= 3
  There exists some i with 0 < i < arr.length - 1 such that:
  arr[0] < arr[1] < ... < arr[i - 1] < arr[i] 
  arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
  Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].
  
  You must solve it in O(log(arr.length)) time complexity.

*/

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        for (int i = 1; i < arr.length - 1; i++) {
            if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {
                return i;
            }
        }

        return -1;
    }
}


// With binary search
class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int l = 0;
        int r = arr.length - 1;
        int index = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (arr[mid] > arr[mid + 1]) {
                index = mid;
                r = mid - 1; 
            } else {
                l = mid + 1;
            }
        }

        return index;
    }
}
