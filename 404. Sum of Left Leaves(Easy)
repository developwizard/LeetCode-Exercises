/*
  Task: Given the root of a binary tree, return the sum of all left leaves.
  A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.

  Example 1:
  Input: root = [3,9,20,null,null,15,7]
  Output: 24
  Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.
  
  Example 2:
  Input: root = [1]
  Output: 0
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// DFS
class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        return dfs(root, false);
    }

    private int dfs(TreeNode node, boolean isLeft) {
        if (node.left == null && node.right == null) {
            return isLeft == true ? node.val : 0;
        }

        int sum = 0;
        if (node.left != null) {
            sum += dfs(node.left, true);
        }
        if (node.right != null) {
            sum += dfs(node.right, false);
        }

        return sum;
    }
}
