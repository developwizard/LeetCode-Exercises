Task: 
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
In other words, return true if one of s1's permutations is the substring of s2.

Example 1:
Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:
Input: s1 = "ab", s2 = "eidboaoo"
Output: false

Example 3:
Input: s1 = "adc", s2 = "dcda"
Output: true


Example 3:
Input: s1 = "ab", s2 = "a"
Output: false

// With Array Sort
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if (s1.length() > s2.length()) {
            return false;
        }
        char[] arr1 = s1.toCharArray();
        Arrays.sort(arr1);
        String sortedS1 = new String(arr1);
        for (int i = 0; i <= s2.length() - s1.length(); i++) {
            char[] arr2 = s2.substring(i, i + s1.length()).toCharArray();
            Arrays.sort(arr2);
            String sortedS2 = new String(arr2);
            if (sortedS1.equals(sortedS2)) {
                return true;
            }
        }
        return false;
    }
}
/*------------------------------------------------------------------------------------------------------------*/
// With HashSet
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if (s1.length() > s2.length()) {
            return false;
        }
        Map<Character, Integer> mapS1CharFreq = new HashMap<>();
        for(int i = 0; i < s1.length(); i++) {
            mapS1CharFreq.putIfAbsent(s1.charAt(i), 0);
            mapS1CharFreq.put(s1.charAt(i), mapS1CharFreq.get(s1.charAt(i)) + 1);
        }

        for(int i = 0; i <= s2.length() - s1.length(); i++) {
            Map<Character, Integer> mapS2CharFreq = new HashMap<>();
            for (int j = i; j < i + s1.length(); j++) {
                mapS2CharFreq.putIfAbsent(s2.charAt(j), 0);
                mapS2CharFreq.put(s2.charAt(j), mapS2CharFreq.get(s2.charAt(j)) + 1);
            }
            if (matches(mapS1CharFreq, mapS2CharFreq)) {
                return true;
            }
        }

        return false;
    }

    
    private boolean matches(Map<Character, Integer> s1map, Map<Character, Integer> s2map) {
        for (Character c : s1map.keySet()) {
            if (!s2map.containsKey(c) || !s1map.get(c).equals(s2map.get(c))) {
                return false;
            }
        }

        return true;
    }
}
/*------------------------------------------------------------------------------------------------------------*/
// Sliding window approach
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if (s1.length() > s2.length()) {
            return false;
        }

        int[] s1CharFreq = new int[26];
        int[] s2CharFreq = new int[26];

        for (int i = 0; i < s1.length(); i++) {
            s1CharFreq[s1.charAt(i) - 'a']++;
            s2CharFreq[s2.charAt(i) - 'a']++;
        }
        if(Arrays.equals(s1CharFreq, s2CharFreq)) {
            return true;
        }

        int leftBound = 0;
        int rightBound = s1.length();
        while(rightBound < s2.length()) {  
            s2CharFreq[s2.charAt(leftBound) - 'a']--;
            s2CharFreq[s2.charAt(rightBound) - 'a']++;

            if(Arrays.equals(s1CharFreq, s2CharFreq)) {
                return true;
            }
            leftBound++;
            rightBound++;
        }
        return false;
    }
}

