/*
  Task: Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

  Example 1:
  Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
  Output: [[1,6],[8,10],[15,18]]
  Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

  Example 2:
  Input: intervals = [[1,4],[4,5]]
  Output: [[1,5]]
  Explanation: Intervals [1,4] and [4,5] are considered overlapping.
*/

// Sorting approach
class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals.length == 1) {
            return intervals;
        }
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        List<int[]> arr = new ArrayList<>();

        int start = intervals[0][0];
        int end = intervals[0][1];

        for (int i = 1; i < intervals.length; i++) {
            int compareIntervalStart = intervals[i][0];
            int compareIntervalEnd = intervals[i][1];

            if(end >= compareIntervalStart) {
                end = Math.max(end, compareIntervalEnd);
            } else {
                arr.add(new int[] {start, end});
                start = compareIntervalStart;
                end = compareIntervalEnd;
            }
        }
        arr.add(new int[] {start, end});

        return arr.toArray(new int[0][]);
    }
}
