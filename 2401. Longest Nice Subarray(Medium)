Task:
You are given an array nums consisting of positive integers.
We call a subarray of nums nice if the bitwise AND of every pair of elements that are in different positions in the subarray is equal to 0.
Return the length of the longest nice subarray.
A subarray is a contiguous part of an array.
Note that subarrays of length 1 are always considered nice.

Example 1:
Input: nums = [1,3,8,48,10]
Output: 3
Explanation: The longest nice subarray is [3,8,48]. This subarray satisfies the conditions:
- 3 AND 8 = 0.
- 3 AND 48 = 0.
- 8 AND 48 = 0.
It can be proven that no longer nice subarray can be obtained, so we return 3.

Example 2:
Input: nums = [3,1,5,11,13]
Output: 1
Explanation: The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.

Example 3:
Input: nums = [84139415,693324769,614626365,497710833,615598711,264,65552,50331652,1,1048576,16384,544,270532608,151813349,221976871,678178917,845710321,751376227,331656525,739558112,267703680]
Output: 8

// Sliding Window, bitwise or, bitwise xor
class Solution {
    public int longestNiceSubarray(int[] nums) {
        if (nums.length == 1) {
            return 1;
        }

        int niceSubArrayLength = 0;
        int slow = 0;
        int andBitMask = 0;
        // pre-increment to ignore the first element and prevent index of bound by slow pointer
        for(int fast = 0; fast < nums.length; ++fast) {
            while ((andBitMask & nums[fast]) != 0) {
                // remove left element from "andBitmask" and set slow pointer to next element
                andBitMask ^= nums[slow++];
            }
            // add right element to bitMask
            andBitMask |= nums[fast];

            niceSubArrayLength = Math.max(niceSubArrayLength, fast - slow + 1);
        }

        return niceSubArrayLength;
    }
}
