Task: 
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
In other words, return true if one of s1's permutations is the substring of s2.

Example 1:
Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:
Input: s1 = "ab", s2 = "eidboaoo"
Output: false

Example 3:
Input: s1 = "adc", s2 = "dcda"
Output: true


// With Array Sort
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        char[] arr1 = s1.toCharArray();
        Arrays.sort(arr1);
        String sortedS1 = new String(arr1);
        for (int i = 0; i <= s2.length() - s1.length(); i++) {
            char[] arr2 = s2.substring(i, i + s1.length()).toCharArray();
            Arrays.sort(arr2);
            String sortedS2 = new String(arr2);
            if (sortedS1.equals(sortedS2)) {
                return true;
            }
        }
        return false;
    }
}
