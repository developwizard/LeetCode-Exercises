/*
  Task: Given the root of a binary tree, return its maximum depth.
  A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

  Example 1:
  Input: root = [3,9,20,null,null,15,7]
  Output: 3

  Example 2:
  Input: root = [1,null,2]
  Output: 2

  Example 3:
  Input: root = []
  Output: 0
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// With recursion
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return getDepth(root, 1);
    }

    private int getDepth(TreeNode node, int level) {
        if (node.left == null && node.right == null) {
            return level;
        }

        int l = 0;
        if (node.left != null) {
            l = Math.max(l, getDepth(node.left, level + 1));
        }
        if (node.right != null) {
            l = Math.max(l, getDepth(node.right, level + 1));
        }

        return l;
    }
}

// BFS
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }

        int maxDepth = 1;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()) {
            int level = 0;
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode node = q.poll();
                if (node.left != null) {
                    q.offer(node.left);
                    level = maxDepth + 1;
                }
                if (node.right != null) {
                    q.offer(node.right);
                    level = maxDepth + 1;
                }
            }
            maxDepth = Math.max(maxDepth, level);
        }
        return maxDepth;
    }
}
