/*
  Task: 
    Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.
    An integer a is closer to x than an integer b if:
    |a - x| < |b - x|, or
    |a - x| == |b - x| and a < b


    Example 1:
    Input: arr = [1,2,3,4,5], k = 4, x = 3
    Output: [1,2,3,4]

    Example 2:
    Input: arr = [1,2,3,4,5], k = 4, x = -1
    Output: [1,2,3,4]

    Example 3:
    Input: arr = [0,0,1,2,3,3,4,7,7,8], k = 3, x = 5
    Output: [3,3,4]
    
    Example 4:
    Input: arr = [1,1,1,10,10,10], k = 1, x = 9
    Output: [10]
*/

// With Linked List
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int maxDiff = Math.abs(arr[0] - x);
        LinkedList<Integer> list = new LinkedList<>();
        list.add(arr[0]);
        for (int i = 1; i < arr.length; i++) {
            if (list.size() < k) {
                list.add(arr[i]);
            } else {
                if (maxDiff > Math.abs(arr[i] - x)) {
                    list.poll();
                    list.add(arr[i]);
                    maxDiff = Math.min(maxDiff, Math.abs(list.element() - x));
                }
            }
        }
        return list;
    }
}

// With two pointers
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int left = 0;
        int right = arr.length - 1;
        while (right - left >= k) {
            if (Math.abs(arr[left] - x) > Math.abs(arr[right] - x)) {
                left++;
            } else {
                right--;
            }
        }

        List<Integer> list = new ArrayList<>(k);
        for (int i = left; i <= right; i++) {
            list.add(arr[i]);
        }
        return list;
    }
}
