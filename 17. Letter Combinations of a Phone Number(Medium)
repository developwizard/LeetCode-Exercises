/*
  Task: Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
  A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

  Example 1:
  Input: digits = "23"
  Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
  
  Example 2:
  Input: digits = ""
  Output: []
  
  Example 3:
  Input: digits = "2"
  Output: ["a","b","c"]
*/

// With backtracking
class Solution {
    public static List<String> letterCombinations(String digits) {
        if (digits.length() == 0) {
            return Collections.emptyList();
        }

        Map<Integer, List<Character>> map = new HashMap<>();
        map.put(2, List.of('a', 'b', 'c'));
        map.put(3, List.of('d', 'e', 'f'));
        map.put(4, List.of('g', 'h', 'i'));
        map.put(5, List.of('j', 'k', 'l'));
        map.put(6, List.of('m', 'n', 'o'));
        map.put(7, List.of('p', 'q', 'r', 's'));
        map.put(8, List.of('t', 'u', 'v'));
        map.put(9, List.of('w', 'x', 'y', 'z'));
        List<String> res = new ArrayList<>();
        backtracking(digits, 0, new StringBuilder(), res, map);
        return res;
    }

    private static void backtracking(String digits, int index, StringBuilder sb, List<String> res, Map<Integer, List<Character>> charMap) {
        if (sb.length() == digits.length()) {
            res.add(sb.toString());
            return;
        }

        for (int i = index; i < digits.length(); i++) {
            for (int j = 0; j < charMap.get(digits.charAt(i) - '0').size(); j++) {
                sb.append(charMap.get(digits.charAt(i) - '0').get(j));
                backtracking(digits, i + 1, sb, res, charMap);
                sb.deleteCharAt(sb.length() - 1);
            }
        }
    }
}
